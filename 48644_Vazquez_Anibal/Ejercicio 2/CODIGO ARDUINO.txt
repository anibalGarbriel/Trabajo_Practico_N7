const int ledPin1 = 13; // Pin para el primer LED
const int ledPin2 = 12; // Pin para el segundo LED
const int buttonPin1 = 2; // Pin para el primer pulsador
const int buttonPin2 = 3; // Pin para el segundo pulsador

int buttonState1 = 0; // Variable para almacenar el estado del primer pulsador
int buttonState2 = 0; // Variable para almacenar el estado del segundo pulsador

void setup() {
  pinMode(ledPin1, OUTPUT); // Configura el pin del primer LED como salida
  pinMode(ledPin2, OUTPUT); // Configura el pin del segundo LED como salida
  pinMode(buttonPin1, INPUT); // Configura el pin del primer pulsador como entrada
  pinMode(buttonPin2, INPUT); // Configura el pin del segundo pulsador como entrada
  Serial.begin(9600); // Inicia la comunicaci칩n serial a 9600 bps
}

void loop() {
  // Lee el estado del primer pulsador
  buttonState1 = digitalRead(buttonPin1);

  // Si el primer pulsador se presiona, enciende o apaga el primer LED
  if (buttonState1 == HIGH) {
    digitalWrite(ledPin1, !digitalRead(ledPin1));
    delay(250); // Agrega un peque침o retardo para evitar rebotes
    Serial.println("L1:" + String(digitalRead(ledPin1)));
  }

  // Lee el estado del segundo pulsador
  buttonState2 = digitalRead(buttonPin2);

  // Si el segundo pulsador se presiona, enciende o apaga el segundo LED
  if (buttonState2 == HIGH) {
    digitalWrite(ledPin2, !digitalRead(ledPin2));
    delay(250); // Agrega un peque침o retardo para evitar rebotes
    Serial.println("L2:" + String(digitalRead(ledPin2)));
  }

  // Si hay datos disponibles para leer desde la comunicaci칩n serial
  while (Serial.available() > 0) {
    String mensaje = Serial.readStringUntil('\n');

    if (mensaje.startsWith("L1:")) {
      int estadoL1 = mensaje.substring(3).toInt();
      digitalWrite(ledPin1, estadoL1);
    } else if (mensaje.startsWith("L2:")) {
      int estadoL2 = mensaje.substring(3).toInt();
      digitalWrite(ledPin2, estadoL2);
    }
  }
}
